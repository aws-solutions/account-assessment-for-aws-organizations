// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`hub stack synth doesnt crash 1`] = `
{
  "Mappings": {
    "AnonymousData": {
      "SendAnonymousData": {
        "Data": "Yes",
      },
    },
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Solution Setup",
          },
          "Parameters": [
            "DeploymentNamespace",
            "OrganizationID",
          ],
        },
        {
          "Label": {
            "default": "DynamoDB Configuration",
          },
          "Parameters": [
            "DynamoTimeToLive",
          ],
        },
        {
          "Label": {
            "default": "Web UI Configuration",
          },
          "Parameters": [
            "UserEmail",
            "MultiFactorAuthentication",
          ],
        },
        {
          "Label": {
            "default": "Security Configuration",
          },
          "Parameters": [
            "AllowListedIPRanges",
          ],
        },
        {
          "Label": {
            "default": "Application Manager Configuration",
          },
          "Parameters": [
            "ManagementAccountId",
          ],
        },
      ],
      "ParameterLabels": {
        "AllowListedIPRanges": {
          "default": "Provide CIDR ranges that allow to console to access the API.",
        },
        "DeploymentNamespace": {
          "default": "Provide a unique namespace value.",
        },
        "DynamoTimeToLive": {
          "default": "Provide Time to live (in days) for DynamoDB items.",
        },
        "ManagementAccountId": {
          "default": "Provide the Org Management Account ID",
        },
        "MultiFactorAuthentication": {
          "default": "Set MFA for Cognito to 'ON' or 'OPTIONAL'",
        },
        "OrganizationID": {
          "default": "Provide the AWS Organization ID",
        },
        "UserEmail": {
          "default": "Provide Web UI Login User Email",
        },
      },
    },
  },
  "Outputs": {
    "ApiAccountAssessmentForAWSOrganisationsApiEndpoint584AF851": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            {
              "Ref": "ApiAccountAssessmentForAWSOrganisationsApiDeploymentStageprod6B748DCF",
            },
            "/",
          ],
        ],
      },
    },
    "ApiApiGatewayURLE593E542": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".amazonaws.com/prod",
          ],
        ],
      },
    },
    "AuthUserPoolClientIdOutputC3824669": {
      "Value": {
        "Ref": "AuthFullAccessUsersWebUIClient18642E52",
      },
    },
    "AuthUserPoolIdOutputF07C6764": {
      "Value": {
        "Ref": "AuthFullAccessUsers932AF091",
      },
    },
    "WebUserInterfaceURL": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Fn::GetAtt": [
                "CloudFrontCloudFrontDistribution824F3346",
                "DomainName",
              ],
            },
          ],
        ],
      },
    },
  },
  "Parameters": {
    "AllowListedIPRanges": {
      "Default": "0.0.0.0/1,128.0.0.0/1",
      "Description": "Comma separated list of CIDR ranges that allow access to the API. To allow all the entire internet, use 0.0.0.0/1,128.0.0.0/1",
      "Type": "CommaDelimitedList",
    },
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "DeploymentNamespace": {
      "AllowedPattern": "^[a-z0-9][a-z0-9-]{1,8}[a-z0-9]$",
      "ConstraintDescription": "Must be 3-10 characters long, containing only lowercase letters, numbers, and hyphens. Cannot begin or end with a hyphen.",
      "Description": "This value is used as prefix for resource names. Same namespace must be used in spoke stack and management account stack.",
      "MaxLength": 10,
      "MinLength": 3,
      "Type": "String",
    },
    "DynamoTimeToLive": {
      "Default": 90,
      "Description": "DynamoDB will delete each stored Item after the given time. This value will be applicable to all the DynamoDB tables.",
      "Type": "Number",
    },
    "ManagementAccountId": {
      "Description": "Account ID for the management account of the Organization.",
      "Type": "String",
    },
    "MultiFactorAuthentication": {
      "AllowedValues": [
        "ON",
        "OPTIONAL",
      ],
      "Default": "OPTIONAL",
      "Description": "Set to 'ON' or 'OPTIONAL' to enable multi factor authentication for Cognito User Pool.",
      "Type": "String",
    },
    "OrganizationID": {
      "AllowedPattern": "^$|^o-[a-z0-9]{10,32}$",
      "Description": "Organization ID",
      "Type": "String",
    },
    "UserEmail": {
      "AllowedPattern": "^(([^<>()\\[\\]\\\\.,;:\\s@"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@"]+)*)|(".+"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$",
      "Description": "Admin user will be created at deployment time. Provide an email address to create this initial Cognito user.",
      "Type": "String",
    },
  },
  "Resources": {
    "ApiAccountAssessmentForAWSOrganisationsApiAccount9C22A6D3": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
      ],
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ApiAccountAssessmentForAWSOrganisationsApiCloudWatchRoleEF2CAC3A",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A": {
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              "AccountAssessmentForAWSOrganisationsApi-",
              {
                "Ref": "DeploymentNamespace",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "ApiAccountAssessmentForAWSOrganisationsApiCloudWatchRoleEF2CAC3A": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CFN_NO_EXPLICIT_RESOURCE_NAMES",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiAccountAssessmentForAWSOrganisationsApiDeployment30D1B1E6f5feea027da95752ea8ef02a45ffdc54": {
      "DependsOn": [
        "ApiAccountAssessmentForAWSOrganisationsApidelegatedadminsGET4A31FEC2",
        "ApiAccountAssessmentForAWSOrganisationsApidelegatedadminsOPTIONS001FCB8B",
        "ApiAccountAssessmentForAWSOrganisationsApidelegatedadminsPOST8B870775",
        "ApiAccountAssessmentForAWSOrganisationsApidelegatedadminsE50B22F7",
        "ApiAccountAssessmentForAWSOrganisationsApijobsassessmentTypeidGETE4BCB085",
        "ApiAccountAssessmentForAWSOrganisationsApijobsassessmentTypeidOPTIONSBA3B7ABE",
        "ApiAccountAssessmentForAWSOrganisationsApijobsassessmentTypeidC28790DF",
        "ApiAccountAssessmentForAWSOrganisationsApijobsassessmentTypeOPTIONSC7E0667E",
        "ApiAccountAssessmentForAWSOrganisationsApijobsassessmentType13020835",
        "ApiAccountAssessmentForAWSOrganisationsApijobsGETA5125B54",
        "ApiAccountAssessmentForAWSOrganisationsApijobsOPTIONSD5103352",
        "ApiAccountAssessmentForAWSOrganisationsApijobsC03CBD56",
        "ApiAccountAssessmentForAWSOrganisationsApiOPTIONSD2A35DEE",
        "ApiAccountAssessmentForAWSOrganisationsApipolicyexplorerpartitionKeyGETB31C53C2",
        "ApiAccountAssessmentForAWSOrganisationsApipolicyexplorerpartitionKeyOPTIONSCDAF6563",
        "ApiAccountAssessmentForAWSOrganisationsApipolicyexplorerpartitionKey2E581A48",
        "ApiAccountAssessmentForAWSOrganisationsApipolicyexplorerOPTIONSA530352A",
        "ApiAccountAssessmentForAWSOrganisationsApipolicyexplorer3DE2309B",
        "ApiAccountAssessmentForAWSOrganisationsApipolicyexplorerscanOPTIONS793C425E",
        "ApiAccountAssessmentForAWSOrganisationsApipolicyexplorerscanPOST9D3A897C",
        "ApiAccountAssessmentForAWSOrganisationsApipolicyexplorerscan794DC3D8",
        "ApiAccountAssessmentForAWSOrganisationsApiresourcebasedpoliciesGET25E1DB26",
        "ApiAccountAssessmentForAWSOrganisationsApiresourcebasedpoliciesOPTIONS44694EB3",
        "ApiAccountAssessmentForAWSOrganisationsApiresourcebasedpolicies3BE50DCC",
        "ApiAccountAssessmentForAWSOrganisationsApitrustedaccessGET85AFCC94",
        "ApiAccountAssessmentForAWSOrganisationsApitrustedaccessOPTIONS67BBBA5F",
        "ApiAccountAssessmentForAWSOrganisationsApitrustedaccessPOST4970B5C0",
        "ApiAccountAssessmentForAWSOrganisationsApitrustedaccessB194924C",
        "ApiCORSResponse4xxFE19E5DC",
        "ApiCORSResponse5xxF5A162EC",
      ],
      "Metadata": {
        "aws:cdk:do-not-refactor": true,
      },
      "Properties": {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "ApiAccountAssessmentForAWSOrganisationsApiDeploymentStageprod6B748DCF": {
      "DependsOn": [
        "ApiAccountAssessmentForAWSOrganisationsApiAccount9C22A6D3",
      ],
      "Properties": {
        "AccessLogSetting": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "ApiProdLogsAC7A9268",
              "Arn",
            ],
          },
          "Format": "{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","user":"$context.identity.user","caller":"$context.identity.caller","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength"}",
        },
        "DeploymentId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApiDeployment30D1B1E6f5feea027da95752ea8ef02a45ffdc54",
        },
        "RestApiId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
        },
        "StageName": "prod",
        "TracingEnabled": true,
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "ApiAccountAssessmentForAWSOrganisationsApiOPTIONSD2A35DEE": {
      "Properties": {
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": {
          "Fn::GetAtt": [
            "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
            "RootResourceId",
          ],
        },
        "RestApiId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "ApiAccountAssessmentForAWSOrganisationsApidelegatedadminsE50B22F7": {
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
            "RootResourceId",
          ],
        },
        "PathPart": "delegated-admins",
        "RestApiId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "ApiAccountAssessmentForAWSOrganisationsApidelegatedadminsGET4A31FEC2": {
      "Properties": {
        "AuthorizationScopes": [
          "account-assessment-api/api",
        ],
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "AuthFullAccessAuthorizer1F31C21E",
        },
        "HttpMethod": "GET",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DelegatedAdminsRead591DCC7E",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApidelegatedadminsE50B22F7",
        },
        "RestApiId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "ApiAccountAssessmentForAWSOrganisationsApidelegatedadminsGETApiPermissionAccountAssessmentHubStackApiAccountAssessmentForAWSOrganisationsApi1AB5A7EFGETdelegatedadmins8F23C70A": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "DelegatedAdminsRead591DCC7E",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
              },
              "/",
              {
                "Ref": "ApiAccountAssessmentForAWSOrganisationsApiDeploymentStageprod6B748DCF",
              },
              "/GET/delegated-admins",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiAccountAssessmentForAWSOrganisationsApidelegatedadminsGETApiPermissionTestAccountAssessmentHubStackApiAccountAssessmentForAWSOrganisationsApi1AB5A7EFGETdelegatedadmins29330C23": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "DelegatedAdminsRead591DCC7E",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
              },
              "/test-invoke-stage/GET/delegated-admins",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiAccountAssessmentForAWSOrganisationsApidelegatedadminsOPTIONS001FCB8B": {
      "Properties": {
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApidelegatedadminsE50B22F7",
        },
        "RestApiId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "ApiAccountAssessmentForAWSOrganisationsApidelegatedadminsPOST8B870775": {
      "Properties": {
        "AuthorizationScopes": [
          "account-assessment-api/api",
        ],
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "AuthFullAccessAuthorizer1F31C21E",
        },
        "HttpMethod": "POST",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DelegatedAdminsStartScanE7DED487",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApidelegatedadminsE50B22F7",
        },
        "RestApiId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "ApiAccountAssessmentForAWSOrganisationsApidelegatedadminsPOSTApiPermissionAccountAssessmentHubStackApiAccountAssessmentForAWSOrganisationsApi1AB5A7EFPOSTdelegatedadmins1BC50B68": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "DelegatedAdminsStartScanE7DED487",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
              },
              "/",
              {
                "Ref": "ApiAccountAssessmentForAWSOrganisationsApiDeploymentStageprod6B748DCF",
              },
              "/POST/delegated-admins",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiAccountAssessmentForAWSOrganisationsApidelegatedadminsPOSTApiPermissionTestAccountAssessmentHubStackApiAccountAssessmentForAWSOrganisationsApi1AB5A7EFPOSTdelegatedadmins368D2D8C": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "DelegatedAdminsStartScanE7DED487",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
              },
              "/test-invoke-stage/POST/delegated-admins",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiAccountAssessmentForAWSOrganisationsApijobsC03CBD56": {
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
            "RootResourceId",
          ],
        },
        "PathPart": "jobs",
        "RestApiId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "ApiAccountAssessmentForAWSOrganisationsApijobsGETA5125B54": {
      "Properties": {
        "ApiKeyRequired": false,
        "AuthorizationScopes": [
          "account-assessment-api/api",
        ],
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "AuthFullAccessAuthorizer1F31C21E",
        },
        "HttpMethod": "GET",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "JobHistoryJobsHandler0605796C",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApijobsC03CBD56",
        },
        "RestApiId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "ApiAccountAssessmentForAWSOrganisationsApijobsGETApiPermissionAccountAssessmentHubStackApiAccountAssessmentForAWSOrganisationsApi1AB5A7EFGETjobs2D361DC1": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "JobHistoryJobsHandler0605796C",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
              },
              "/",
              {
                "Ref": "ApiAccountAssessmentForAWSOrganisationsApiDeploymentStageprod6B748DCF",
              },
              "/GET/jobs",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiAccountAssessmentForAWSOrganisationsApijobsGETApiPermissionTestAccountAssessmentHubStackApiAccountAssessmentForAWSOrganisationsApi1AB5A7EFGETjobsAECF254D": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "JobHistoryJobsHandler0605796C",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
              },
              "/test-invoke-stage/GET/jobs",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiAccountAssessmentForAWSOrganisationsApijobsOPTIONSD5103352": {
      "Properties": {
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApijobsC03CBD56",
        },
        "RestApiId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "ApiAccountAssessmentForAWSOrganisationsApijobsassessmentType13020835": {
      "Properties": {
        "ParentId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApijobsC03CBD56",
        },
        "PathPart": "{assessmentType}",
        "RestApiId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "ApiAccountAssessmentForAWSOrganisationsApijobsassessmentTypeOPTIONSC7E0667E": {
      "Properties": {
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApijobsassessmentType13020835",
        },
        "RestApiId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "ApiAccountAssessmentForAWSOrganisationsApijobsassessmentTypeidC28790DF": {
      "Properties": {
        "ParentId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApijobsassessmentType13020835",
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "ApiAccountAssessmentForAWSOrganisationsApijobsassessmentTypeidGETApiPermissionAccountAssessmentHubStackApiAccountAssessmentForAWSOrganisationsApi1AB5A7EFGETjobsassessmentTypeidA2ACEA3B": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "JobHistoryJobsHandler0605796C",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
              },
              "/",
              {
                "Ref": "ApiAccountAssessmentForAWSOrganisationsApiDeploymentStageprod6B748DCF",
              },
              "/GET/jobs/*/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiAccountAssessmentForAWSOrganisationsApijobsassessmentTypeidGETApiPermissionTestAccountAssessmentHubStackApiAccountAssessmentForAWSOrganisationsApi1AB5A7EFGETjobsassessmentTypeidFBE13046": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "JobHistoryJobsHandler0605796C",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
              },
              "/test-invoke-stage/GET/jobs/*/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiAccountAssessmentForAWSOrganisationsApijobsassessmentTypeidGETE4BCB085": {
      "Properties": {
        "ApiKeyRequired": false,
        "AuthorizationScopes": [
          "account-assessment-api/api",
        ],
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "AuthFullAccessAuthorizer1F31C21E",
        },
        "HttpMethod": "GET",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "JobHistoryJobsHandler0605796C",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApijobsassessmentTypeidC28790DF",
        },
        "RestApiId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "ApiAccountAssessmentForAWSOrganisationsApijobsassessmentTypeidOPTIONSBA3B7ABE": {
      "Properties": {
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApijobsassessmentTypeidC28790DF",
        },
        "RestApiId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "ApiAccountAssessmentForAWSOrganisationsApipolicyexplorer3DE2309B": {
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
            "RootResourceId",
          ],
        },
        "PathPart": "policy-explorer",
        "RestApiId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "ApiAccountAssessmentForAWSOrganisationsApipolicyexplorerOPTIONSA530352A": {
      "Properties": {
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApipolicyexplorer3DE2309B",
        },
        "RestApiId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "ApiAccountAssessmentForAWSOrganisationsApipolicyexplorerpartitionKey2E581A48": {
      "Properties": {
        "ParentId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApipolicyexplorer3DE2309B",
        },
        "PathPart": "{partitionKey}",
        "RestApiId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "ApiAccountAssessmentForAWSOrganisationsApipolicyexplorerpartitionKeyGETApiPermissionAccountAssessmentHubStackApiAccountAssessmentForAWSOrganisationsApi1AB5A7EFGETpolicyexplorerpartitionKeyA39EE929": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "PolicyExplorerReadD7458004",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
              },
              "/",
              {
                "Ref": "ApiAccountAssessmentForAWSOrganisationsApiDeploymentStageprod6B748DCF",
              },
              "/GET/policy-explorer/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiAccountAssessmentForAWSOrganisationsApipolicyexplorerpartitionKeyGETApiPermissionTestAccountAssessmentHubStackApiAccountAssessmentForAWSOrganisationsApi1AB5A7EFGETpolicyexplorerpartitionKeyF99B3489": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "PolicyExplorerReadD7458004",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
              },
              "/test-invoke-stage/GET/policy-explorer/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiAccountAssessmentForAWSOrganisationsApipolicyexplorerpartitionKeyGETB31C53C2": {
      "Properties": {
        "AuthorizationScopes": [
          "account-assessment-api/api",
        ],
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "AuthFullAccessAuthorizer1F31C21E",
        },
        "HttpMethod": "GET",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PolicyExplorerReadD7458004",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApipolicyexplorerpartitionKey2E581A48",
        },
        "RestApiId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "ApiAccountAssessmentForAWSOrganisationsApipolicyexplorerpartitionKeyOPTIONSCDAF6563": {
      "Properties": {
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApipolicyexplorerpartitionKey2E581A48",
        },
        "RestApiId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "ApiAccountAssessmentForAWSOrganisationsApipolicyexplorerscan794DC3D8": {
      "Properties": {
        "ParentId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApipolicyexplorer3DE2309B",
        },
        "PathPart": "scan",
        "RestApiId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "ApiAccountAssessmentForAWSOrganisationsApipolicyexplorerscanOPTIONS793C425E": {
      "Properties": {
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApipolicyexplorerscan794DC3D8",
        },
        "RestApiId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "ApiAccountAssessmentForAWSOrganisationsApipolicyexplorerscanPOST9D3A897C": {
      "Properties": {
        "AuthorizationScopes": [
          "account-assessment-api/api",
        ],
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "AuthFullAccessAuthorizer1F31C21E",
        },
        "HttpMethod": "POST",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PolicyExplorerPolicyExplorerScanSingleAccount706DFDA3",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApipolicyexplorerscan794DC3D8",
        },
        "RestApiId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "ApiAccountAssessmentForAWSOrganisationsApipolicyexplorerscanPOSTApiPermissionAccountAssessmentHubStackApiAccountAssessmentForAWSOrganisationsApi1AB5A7EFPOSTpolicyexplorerscanC5F295A9": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "PolicyExplorerPolicyExplorerScanSingleAccount706DFDA3",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
              },
              "/",
              {
                "Ref": "ApiAccountAssessmentForAWSOrganisationsApiDeploymentStageprod6B748DCF",
              },
              "/POST/policy-explorer/scan",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiAccountAssessmentForAWSOrganisationsApipolicyexplorerscanPOSTApiPermissionTestAccountAssessmentHubStackApiAccountAssessmentForAWSOrganisationsApi1AB5A7EFPOSTpolicyexplorerscan400D1468": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "PolicyExplorerPolicyExplorerScanSingleAccount706DFDA3",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
              },
              "/test-invoke-stage/POST/policy-explorer/scan",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiAccountAssessmentForAWSOrganisationsApiresourcebasedpolicies3BE50DCC": {
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
            "RootResourceId",
          ],
        },
        "PathPart": "resource-based-policies",
        "RestApiId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "ApiAccountAssessmentForAWSOrganisationsApiresourcebasedpoliciesGET25E1DB26": {
      "Properties": {
        "AuthorizationScopes": [
          "account-assessment-api/api",
        ],
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "AuthFullAccessAuthorizer1F31C21E",
        },
        "HttpMethod": "GET",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ResourceBasedPolicyReadDC5D2BC4",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApiresourcebasedpolicies3BE50DCC",
        },
        "RestApiId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "ApiAccountAssessmentForAWSOrganisationsApiresourcebasedpoliciesGETApiPermissionAccountAssessmentHubStackApiAccountAssessmentForAWSOrganisationsApi1AB5A7EFGETresourcebasedpolicies9851B95C": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "ResourceBasedPolicyReadDC5D2BC4",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
              },
              "/",
              {
                "Ref": "ApiAccountAssessmentForAWSOrganisationsApiDeploymentStageprod6B748DCF",
              },
              "/GET/resource-based-policies",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiAccountAssessmentForAWSOrganisationsApiresourcebasedpoliciesGETApiPermissionTestAccountAssessmentHubStackApiAccountAssessmentForAWSOrganisationsApi1AB5A7EFGETresourcebasedpolicies6DF56992": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "ResourceBasedPolicyReadDC5D2BC4",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
              },
              "/test-invoke-stage/GET/resource-based-policies",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiAccountAssessmentForAWSOrganisationsApiresourcebasedpoliciesOPTIONS44694EB3": {
      "Properties": {
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApiresourcebasedpolicies3BE50DCC",
        },
        "RestApiId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "ApiAccountAssessmentForAWSOrganisationsApitrustedaccessB194924C": {
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
            "RootResourceId",
          ],
        },
        "PathPart": "trusted-access",
        "RestApiId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "ApiAccountAssessmentForAWSOrganisationsApitrustedaccessGET85AFCC94": {
      "Properties": {
        "AuthorizationScopes": [
          "account-assessment-api/api",
        ],
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "AuthFullAccessAuthorizer1F31C21E",
        },
        "HttpMethod": "GET",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "TrustedAccessRead96AB6071",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApitrustedaccessB194924C",
        },
        "RestApiId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "ApiAccountAssessmentForAWSOrganisationsApitrustedaccessGETApiPermissionAccountAssessmentHubStackApiAccountAssessmentForAWSOrganisationsApi1AB5A7EFGETtrustedaccess156DE2FD": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "TrustedAccessRead96AB6071",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
              },
              "/",
              {
                "Ref": "ApiAccountAssessmentForAWSOrganisationsApiDeploymentStageprod6B748DCF",
              },
              "/GET/trusted-access",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiAccountAssessmentForAWSOrganisationsApitrustedaccessGETApiPermissionTestAccountAssessmentHubStackApiAccountAssessmentForAWSOrganisationsApi1AB5A7EFGETtrustedaccess3B8A2E25": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "TrustedAccessRead96AB6071",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
              },
              "/test-invoke-stage/GET/trusted-access",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiAccountAssessmentForAWSOrganisationsApitrustedaccessOPTIONS67BBBA5F": {
      "Properties": {
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApitrustedaccessB194924C",
        },
        "RestApiId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "ApiAccountAssessmentForAWSOrganisationsApitrustedaccessPOST4970B5C0": {
      "Properties": {
        "AuthorizationScopes": [
          "account-assessment-api/api",
        ],
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "AuthFullAccessAuthorizer1F31C21E",
        },
        "HttpMethod": "POST",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "TrustedAccessStartScan70308E2B",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApitrustedaccessB194924C",
        },
        "RestApiId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "ApiAccountAssessmentForAWSOrganisationsApitrustedaccessPOSTApiPermissionAccountAssessmentHubStackApiAccountAssessmentForAWSOrganisationsApi1AB5A7EFPOSTtrustedaccess221E7B2E": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "TrustedAccessStartScan70308E2B",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
              },
              "/",
              {
                "Ref": "ApiAccountAssessmentForAWSOrganisationsApiDeploymentStageprod6B748DCF",
              },
              "/POST/trusted-access",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiAccountAssessmentForAWSOrganisationsApitrustedaccessPOSTApiPermissionTestAccountAssessmentHubStackApiAccountAssessmentForAWSOrganisationsApi1AB5A7EFPOSTtrustedaccess961AA33F": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "TrustedAccessStartScan70308E2B",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
              },
              "/test-invoke-stage/POST/trusted-access",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiCORSResponse4xxFE19E5DC": {
      "Properties": {
        "ResponseParameters": {
          "gatewayresponse.header.gatewayresponse.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
          "gatewayresponse.header.gatewayresponse.header.Access-Control-Allow-Methods": "'GET,OPTIONS,POST,PUT,DELETE'",
          "gatewayresponse.header.gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
        },
        "ResponseType": "DEFAULT_4XX",
        "RestApiId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
        },
      },
      "Type": "AWS::ApiGateway::GatewayResponse",
    },
    "ApiCORSResponse5xxF5A162EC": {
      "Properties": {
        "ResponseParameters": {
          "gatewayresponse.header.gatewayresponse.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
          "gatewayresponse.header.gatewayresponse.header.Access-Control-Allow-Methods": "'GET,OPTIONS,POST,PUT,DELETE'",
          "gatewayresponse.header.gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
        },
        "ResponseType": "DEFAULT_5XX",
        "RestApiId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
        },
      },
      "Type": "AWS::ApiGateway::GatewayResponse",
    },
    "ApiIPSet27316B4C": {
      "Properties": {
        "Addresses": {
          "Ref": "AllowListedIPRanges",
        },
        "IPAddressVersion": "IPV4",
        "Scope": "REGIONAL",
      },
      "Type": "AWS::WAFv2::IPSet",
    },
    "ApiMyCfnWebACLAssociation75BACA0F": {
      "Properties": {
        "ResourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              "::/restapis/",
              {
                "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
              },
              "/stages/",
              {
                "Ref": "ApiAccountAssessmentForAWSOrganisationsApiDeploymentStageprod6B748DCF",
              },
            ],
          ],
        },
        "WebACLArn": {
          "Fn::GetAtt": [
            "WebACL",
            "Arn",
          ],
        },
      },
      "Type": "AWS::WAFv2::WebACLAssociation",
    },
    "ApiProdLogsAC7A9268": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CLOUDWATCH_LOG_GROUP_ENCRYPTED",
          ],
        },
      },
      "Properties": {
        "RetentionInDays": 3653,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "AuthDomainLambda42690529": {
      "DependsOn": [
        "AuthDomainLambdaServiceRoleDefaultPolicyEF8D5B6D",
        "AuthDomainLambdaServiceRoleF1A81F0E",
      ],
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "LAMBDA_INSIDE_VPC",
            "LAMBDA_CONCURRENCY_CHECK",
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "foo.zip",
        },
        "Handler": "manage_cognito_domain/manage_cognito_domain.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "AuthDomainLambdaServiceRoleF1A81F0E",
            "Arn",
          ],
        },
        "Runtime": "python3.12",
        "Timeout": 300,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "AuthDomainLambdaServiceRoleDefaultPolicyEF8D5B6D": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "cognito-idp:CreateUserPoolDomain",
                "cognito-idp:DeleteUserPoolDomain",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "AuthFullAccessUsers932AF091",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "AuthDomainLambdaServiceRoleDefaultPolicyEF8D5B6D",
        "Roles": [
          {
            "Ref": "AuthDomainLambdaServiceRoleF1A81F0E",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "AuthDomainLambdaServiceRoleF1A81F0E": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CFN_NO_EXPLICIT_RESOURCE_NAMES",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "AuthFullAccessAuthorizer1F31C21E": {
      "Properties": {
        "IdentitySource": "method.request.header.Authorization",
        "Name": "FullAccessAuthorizer",
        "ProviderARNs": [
          {
            "Fn::GetAtt": [
              "AuthFullAccessUsers932AF091",
              "Arn",
            ],
          },
        ],
        "RestApiId": {
          "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
        },
        "Type": "COGNITO_USER_POOLS",
      },
      "Type": "AWS::ApiGateway::Authorizer",
    },
    "AuthFullAccessGroup00D474E7": {
      "Properties": {
        "Description": "Provides unrestricted access to the RestApi",
        "GroupName": "FullAccessGroup",
        "UserPoolId": {
          "Ref": "AuthFullAccessUsers932AF091",
        },
      },
      "Type": "AWS::Cognito::UserPoolGroup",
    },
    "AuthFullAccessUsers932AF091": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AccountRecoverySetting": {
          "RecoveryMechanisms": [
            {
              "Name": "verified_phone_number",
              "Priority": 1,
            },
            {
              "Name": "verified_email",
              "Priority": 2,
            },
          ],
        },
        "AdminCreateUserConfig": {
          "AllowAdminCreateUserOnly": true,
          "InviteMessageTemplate": {
            "EmailMessage": {
              "Fn::Join": [
                "",
                [
                  "<p>Account Assessment for AWS Organizations</p><p>Here are your temporary login credentials for the WebUI: https://",
                  {
                    "Fn::GetAtt": [
                      "CloudFrontCloudFrontDistribution824F3346",
                      "DomainName",
                    ],
                  },
                  "</p>
<p>
Region: ",
                  {
                    "Ref": "AWS::Region",
                  },
                  "<br />
Username: <strong>{username}</strong><br />
Temporary Password: <strong>{####}</strong>
</p>",
                ],
              ],
            },
            "EmailSubject": "WebUI Credentials - Account Assessment for AWS Organizations",
          },
        },
        "AutoVerifiedAttributes": [
          "email",
        ],
        "EmailVerificationMessage": "The verification code to your new account is {####}",
        "EmailVerificationSubject": "Verify your new account",
        "EnabledMfas": [
          "SOFTWARE_TOKEN_MFA",
        ],
        "MfaConfiguration": {
          "Ref": "MultiFactorAuthentication",
        },
        "Policies": {
          "PasswordPolicy": {
            "MinimumLength": 8,
            "RequireLowercase": true,
            "RequireNumbers": true,
            "RequireSymbols": true,
            "RequireUppercase": true,
            "TemporaryPasswordValidityDays": 7,
          },
        },
        "SmsVerificationMessage": "The verification code to your new account is {####}",
        "UsernameAttributes": [
          "email",
        ],
        "VerificationMessageTemplate": {
          "DefaultEmailOption": "CONFIRM_WITH_CODE",
          "EmailMessage": "The verification code to your new account is {####}",
          "EmailSubject": "Verify your new account",
          "SmsMessage": "The verification code to your new account is {####}",
        },
      },
      "Type": "AWS::Cognito::UserPool",
      "UpdateReplacePolicy": "Retain",
    },
    "AuthFullAccessUsersWebUIClient18642E52": {
      "DependsOn": [
        "AuthResourceServer569006C5",
      ],
      "Properties": {
        "AllowedOAuthFlows": [
          "code",
        ],
        "AllowedOAuthFlowsUserPoolClient": true,
        "AllowedOAuthScopes": [
          "openid",
          "profile",
          "email",
          "aws.cognito.signin.user.admin",
          "account-assessment-api/api",
        ],
        "CallbackURLs": [
          "http://localhost:3000/",
          {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Fn::GetAtt": [
                    "CloudFrontCloudFrontDistribution824F3346",
                    "DomainName",
                  ],
                },
                "/",
              ],
            ],
          },
        ],
        "ExplicitAuthFlows": [
          "ALLOW_USER_SRP_AUTH",
          "ALLOW_REFRESH_TOKEN_AUTH",
        ],
        "LogoutURLs": [
          "http://localhost:3000/",
          {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Fn::GetAtt": [
                    "CloudFrontCloudFrontDistribution824F3346",
                    "DomainName",
                  ],
                },
                "/",
              ],
            ],
          },
        ],
        "SupportedIdentityProviders": [
          "COGNITO",
        ],
        "UserPoolId": {
          "Ref": "AuthFullAccessUsers932AF091",
        },
      },
      "Type": "AWS::Cognito::UserPoolClient",
    },
    "AuthInitialFullAccessUser3C7C83CA": {
      "Properties": {
        "UserAttributes": [
          {
            "Name": "email_verified",
            "Value": "true",
          },
          {
            "Name": "email",
            "Value": {
              "Ref": "UserEmail",
            },
          },
        ],
        "UserPoolId": {
          "Ref": "AuthFullAccessUsers932AF091",
        },
        "Username": {
          "Ref": "UserEmail",
        },
      },
      "Type": "AWS::Cognito::UserPoolUser",
    },
    "AuthInitialFullAccessUserToGroupAttachmentF5F4B4BB": {
      "DependsOn": [
        "AuthFullAccessGroup00D474E7",
        "AuthInitialFullAccessUser3C7C83CA",
      ],
      "Properties": {
        "GroupName": "FullAccessGroup",
        "UserPoolId": {
          "Ref": "AuthFullAccessUsers932AF091",
        },
        "Username": {
          "Ref": "UserEmail",
        },
      },
      "Type": "AWS::Cognito::UserPoolUserToGroupAttachment",
    },
    "AuthResourceServer569006C5": {
      "Properties": {
        "Identifier": "account-assessment-api",
        "Name": "Resource Server representing the API Gateway of the solution",
        "Scopes": [
          {
            "ScopeDescription": "Access to solution API",
            "ScopeName": "api",
          },
        ],
        "UserPoolId": {
          "Ref": "AuthFullAccessUsers932AF091",
        },
      },
      "Type": "AWS::Cognito::UserPoolResourceServer",
    },
    "AuthUserPoolDomainCustomResource77C501EE": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "DomainPrefix": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "DeploymentNamespace",
              },
              "-",
              {
                "Ref": "AWS::AccountId",
              },
            ],
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "AuthDomainLambda42690529",
            "Arn",
          ],
        },
        "UserPoolId": {
          "Ref": "AuthFullAccessUsers932AF091",
        },
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "CloudFrontCloudFrontDistribution824F3346": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W70",
              "reason": "Since the distribution uses the CloudFront domain name, CloudFront automatically sets the security policy to TLSv1 regardless of the value of MinimumProtocolVersion",
            },
          ],
        },
      },
      "Properties": {
        "DistributionConfig": {
          "CustomErrorResponses": [
            {
              "ErrorCachingMinTTL": 300,
              "ErrorCode": 403,
              "ResponseCode": 200,
              "ResponsePagePath": "/index.html",
            },
            {
              "ErrorCachingMinTTL": 300,
              "ErrorCode": 404,
              "ResponseCode": 200,
              "ResponsePagePath": "/index.html",
            },
            {
              "ErrorCachingMinTTL": 300,
              "ErrorCode": 400,
              "ResponseCode": 200,
              "ResponsePagePath": "/index.html",
            },
          ],
          "DefaultCacheBehavior": {
            "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
            "Compress": true,
            "ResponseHeadersPolicyId": {
              "Ref": "CloudFrontResponseHeadersPolicy167CC132",
            },
            "TargetOriginId": "AccountAssessmentHubStackCloudFrontCloudFrontDistributionOrigin1185E7086",
            "ViewerProtocolPolicy": "redirect-to-https",
          },
          "DefaultRootObject": "index.html",
          "Enabled": true,
          "HttpVersion": "http2",
          "IPV6Enabled": true,
          "Logging": {
            "Bucket": {
              "Fn::GetAtt": [
                "CloudFrontCloudfrontLoggingBucketE23C521E",
                "RegionalDomainName",
              ],
            },
          },
          "Origins": [
            {
              "DomainName": {
                "Fn::GetAtt": [
                  "CloudFrontS3Bucket68FEB4E1",
                  "RegionalDomainName",
                ],
              },
              "Id": "AccountAssessmentHubStackCloudFrontCloudFrontDistributionOrigin1185E7086",
              "OriginAccessControlId": {
                "Fn::GetAtt": [
                  "CloudFrontCloudFrontOac36AB834C",
                  "Id",
                ],
              },
              "S3OriginConfig": {
                "OriginAccessIdentity": "",
              },
            },
          ],
        },
      },
      "Type": "AWS::CloudFront::Distribution",
    },
    "CloudFrontCloudFrontOac36AB834C": {
      "Properties": {
        "OriginAccessControlConfig": {
          "Description": "Origin access control provisioned by aws-cloudfront-s3",
          "Name": {
            "Fn::Join": [
              "",
              [
                "aws-cloudfront-s3-ClouFront-",
                {
                  "Fn::Select": [
                    2,
                    {
                      "Fn::Split": [
                        "/",
                        {
                          "Ref": "AWS::StackId",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
          "OriginAccessControlOriginType": "s3",
          "SigningBehavior": "always",
          "SigningProtocol": "sigv4",
        },
      },
      "Type": "AWS::CloudFront::OriginAccessControl",
    },
    "CloudFrontCloudfrontLoggingBucketAccessLogD57288E7": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W35",
              "reason": "This S3 bucket is used as the access logging bucket for another bucket",
            },
          ],
        },
      },
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "VersioningConfiguration": {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudFrontCloudfrontLoggingBucketAccessLogPolicy2D3F422E": {
      "Properties": {
        "Bucket": {
          "Ref": "CloudFrontCloudfrontLoggingBucketAccessLogD57288E7",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CloudFrontCloudfrontLoggingBucketAccessLogD57288E7",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "CloudFrontCloudfrontLoggingBucketAccessLogD57288E7",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "s3:PutObject",
              "Condition": {
                "ArnLike": {
                  "aws:SourceArn": {
                    "Fn::GetAtt": [
                      "CloudFrontCloudfrontLoggingBucketE23C521E",
                      "Arn",
                    ],
                  },
                },
                "StringEquals": {
                  "aws:SourceAccount": {
                    "Ref": "AWS::AccountId",
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "logging.s3.amazonaws.com",
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "CloudFrontCloudfrontLoggingBucketAccessLogD57288E7",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "CloudFrontCloudfrontLoggingBucketE23C521E": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AccessControl": "LogDeliveryWrite",
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "LoggingConfiguration": {
          "DestinationBucketName": {
            "Ref": "CloudFrontCloudfrontLoggingBucketAccessLogD57288E7",
          },
        },
        "OwnershipControls": {
          "Rules": [
            {
              "ObjectOwnership": "ObjectWriter",
            },
          ],
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "VersioningConfiguration": {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudFrontCloudfrontLoggingBucketPolicyD60AA01A": {
      "Properties": {
        "Bucket": {
          "Ref": "CloudFrontCloudfrontLoggingBucketE23C521E",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CloudFrontCloudfrontLoggingBucketE23C521E",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "CloudFrontCloudfrontLoggingBucketE23C521E",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "CloudFrontResponseHeadersPolicy167CC132": {
      "Properties": {
        "ResponseHeadersPolicyConfig": {
          "Comment": "Adds a set of recommended security headers",
          "CustomHeadersConfig": {
            "Items": [
              {
                "Header": "Cache-Control",
                "Override": true,
                "Value": "no-store, no-cache",
              },
              {
                "Header": "Pragma",
                "Override": true,
                "Value": "no-cache",
              },
            ],
          },
          "Name": {
            "Fn::Join": [
              "-",
              [
                "AccountAssessmentHeaders-WebUIHosting",
                {
                  "Ref": "DeploymentNamespace",
                },
                {
                  "Ref": "AWS::Region",
                },
              ],
            ],
          },
          "SecurityHeadersConfig": {
            "ContentSecurityPolicy": {
              "ContentSecurityPolicy": "upgrade-insecure-requests; default-src 'none'; manifest-src 'self'; img-src 'self'; font-src data:; connect-src 'self' https:; script-src 'self'; style-src https:; base-uri 'none'; frame-ancestors 'none';",
              "Override": true,
            },
            "ContentTypeOptions": {
              "Override": true,
            },
            "FrameOptions": {
              "FrameOption": "DENY",
              "Override": true,
            },
            "ReferrerPolicy": {
              "Override": true,
              "ReferrerPolicy": "same-origin",
            },
            "StrictTransportSecurity": {
              "AccessControlMaxAgeSec": 2592000,
              "IncludeSubdomains": true,
              "Override": true,
              "Preload": true,
            },
          },
        },
      },
      "Type": "AWS::CloudFront::ResponseHeadersPolicy",
    },
    "CloudFrontS3Bucket68FEB4E1": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "LifecycleConfiguration": {
          "Rules": [
            {
              "NoncurrentVersionTransitions": [
                {
                  "StorageClass": "GLACIER",
                  "TransitionInDays": 90,
                },
              ],
              "Status": "Enabled",
            },
          ],
        },
        "LoggingConfiguration": {
          "DestinationBucketName": {
            "Ref": "CloudFrontS3LoggingBucketE3DA3BDA",
          },
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "VersioningConfiguration": {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudFrontS3BucketPolicy9059DB0F": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F16",
              "reason": "Public website bucket policy requires a wildcard principal",
            },
          ],
        },
      },
      "Properties": {
        "Bucket": {
          "Ref": "CloudFrontS3Bucket68FEB4E1",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CloudFrontS3Bucket68FEB4E1",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "CloudFrontS3Bucket68FEB4E1",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "s3:GetObject",
              "Condition": {
                "StringEquals": {
                  "AWS:SourceArn": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":cloudfront::",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":distribution/",
                        {
                          "Ref": "CloudFrontCloudFrontDistribution824F3346",
                        },
                      ],
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "cloudfront.amazonaws.com",
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "CloudFrontS3Bucket68FEB4E1",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "CloudFrontS3LoggingBucketE3DA3BDA": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W35",
              "reason": "This S3 bucket is used as the access logging bucket for another bucket",
            },
          ],
        },
      },
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "VersioningConfiguration": {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudFrontS3LoggingBucketPolicyFA23F105": {
      "Properties": {
        "Bucket": {
          "Ref": "CloudFrontS3LoggingBucketE3DA3BDA",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CloudFrontS3LoggingBucketE3DA3BDA",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "CloudFrontS3LoggingBucketE3DA3BDA",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "s3:PutObject",
              "Condition": {
                "ArnLike": {
                  "aws:SourceArn": {
                    "Fn::GetAtt": [
                      "CloudFrontS3Bucket68FEB4E1",
                      "Arn",
                    ],
                  },
                },
                "StringEquals": {
                  "aws:SourceAccount": {
                    "Ref": "AWS::AccountId",
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "logging.s3.amazonaws.com",
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "CloudFrontS3LoggingBucketE3DA3BDA",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "DelegatedAdminsRead591DCC7E": {
      "DependsOn": [
        "DelegatedAdminsReadServiceRoleDefaultPolicyC18A0D35",
        "DelegatedAdminsReadServiceRoleBDC7C449",
      ],
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "LAMBDA_INSIDE_VPC",
            "LAMBDA_CONCURRENCY_CHECK",
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "foo.zip",
        },
        "Environment": {
          "Variables": {
            "COMPONENT_TABLE": {
              "Ref": "DelegatedAdminsTable29E80916",
            },
            "NAMESPACE": {
              "Ref": "DeploymentNamespace",
            },
            "POWERTOOLS_SERVICE_NAME": "ReadDelegatedAdmin",
            "SEND_ANONYMOUS_DATA": {
              "Fn::FindInMap": [
                "AnonymousData",
                "SendAnonymousData",
                "Data",
              ],
            },
            "SOLUTION_VERSION": "v1.0.0",
            "STACK_ID": {
              "Ref": "AWS::StackId",
            },
            "TABLE_JOBS": {
              "Ref": "JobHistoryTableE4B293DD",
            },
          },
        },
        "Handler": "delegated_admins/read_delegated_admins.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "DelegatedAdminsReadServiceRoleBDC7C449",
            "Arn",
          ],
        },
        "Runtime": "python3.12",
        "Timeout": 60,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "DelegatedAdminsReadServiceRoleBDC7C449": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CFN_NO_EXPLICIT_RESOURCE_NAMES",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DelegatedAdminsReadServiceRoleDefaultPolicyC18A0D35": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "DelegatedAdminsTable29E80916",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "DelegatedAdminsTable29E80916",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "JobHistoryTableE4B293DD",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DelegatedAdminsReadServiceRoleDefaultPolicyC18A0D35",
        "Roles": [
          {
            "Ref": "DelegatedAdminsReadServiceRoleBDC7C449",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DelegatedAdminsStartScanE7DED487": {
      "DependsOn": [
        "DelegatedAdminsStartScanServiceRoleDefaultPolicyFB859E87",
        "DelegatedAdminsStartScanServiceRole9CC01771",
      ],
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "LAMBDA_INSIDE_VPC",
            "LAMBDA_CONCURRENCY_CHECK",
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "foo.zip",
        },
        "Environment": {
          "Variables": {
            "COMPONENT_TABLE": {
              "Ref": "DelegatedAdminsTable29E80916",
            },
            "LOG_LEVEL": "INFO",
            "NAMESPACE": {
              "Ref": "DeploymentNamespace",
            },
            "ORG_MANAGEMENT_ROLE_NAME": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "DeploymentNamespace",
                  },
                  "-",
                  {
                    "Ref": "AWS::Region",
                  },
                  "-AccountAssessment-OrgMgmtStackRole",
                ],
              ],
            },
            "POWERTOOLS_SERVICE_NAME": "ScanDelegatedAdmin",
            "SEND_ANONYMOUS_DATA": {
              "Fn::FindInMap": [
                "AnonymousData",
                "SendAnonymousData",
                "Data",
              ],
            },
            "SOLUTION_VERSION": "v1.0.0",
            "STACK_ID": {
              "Ref": "AWS::StackId",
            },
            "TABLE_JOBS": {
              "Ref": "JobHistoryTableE4B293DD",
            },
            "TIME_TO_LIVE_IN_DAYS": {
              "Ref": "DynamoTimeToLive",
            },
          },
        },
        "Handler": "delegated_admins/scan_for_delegated_admins.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "DelegatedAdminsStartScanServiceRole9CC01771",
            "Arn",
          ],
        },
        "Runtime": "python3.12",
        "Timeout": 120,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "DelegatedAdminsStartScanServiceRole9CC01771": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CFN_NO_EXPLICIT_RESOURCE_NAMES",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "RoleName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "DeploymentNamespace",
              },
              "-",
              {
                "Ref": "AWS::Region",
              },
              "-DelegatedAdmin",
            ],
          ],
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "DelegatedAdminsStartScanServiceRoleDefaultPolicyFB859E87": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "Resource * is necessary for organizations:List* operations. No risk, because the role can still only access its own organization.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "organizations:DescribeOrganization",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:iam::*:role/",
                    {
                      "Ref": "DeploymentNamespace",
                    },
                    "-",
                    {
                      "Ref": "AWS::Region",
                    },
                    "-AccountAssessment-OrgMgmtStackRole",
                  ],
                ],
              },
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "DelegatedAdminsTable29E80916",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "DelegatedAdminsTable29E80916",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "JobHistoryTableE4B293DD",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DelegatedAdminsStartScanServiceRoleDefaultPolicyFB859E87",
        "Roles": [
          {
            "Ref": "DelegatedAdminsStartScanServiceRole9CC01771",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DelegatedAdminsTable29E80916": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "DYNAMODB_TABLE_ENCRYPTED_KMS",
            "DYNAMODB_TABLE_ENCRYPTED_KMS_ALLOWED_ALGORITHMS",
          ],
        },
      },
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "PartitionKey",
            "AttributeType": "S",
          },
          {
            "AttributeName": "SortKey",
            "AttributeType": "S",
          },
          {
            "AttributeName": "JobId",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "JobId",
            "KeySchema": [
              {
                "AttributeName": "JobId",
                "KeyType": "HASH",
              },
            ],
            "Projection": {
              "ProjectionType": "ALL",
            },
          },
        ],
        "KeySchema": [
          {
            "AttributeName": "PartitionKey",
            "KeyType": "HASH",
          },
          {
            "AttributeName": "SortKey",
            "KeyType": "RANGE",
          },
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true,
          "RecoveryPeriodInDays": 10,
        },
        "SSESpecification": {
          "SSEEnabled": true,
        },
        "TimeToLiveSpecification": {
          "AttributeName": "ExpiresAt",
          "Enabled": true,
        },
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "JobHistoryJobsHandler0605796C": {
      "DependsOn": [
        "JobHistoryJobsHandlerServiceRoleDefaultPolicy4863DA03",
        "JobHistoryJobsHandlerServiceRole5B211282",
      ],
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "LAMBDA_INSIDE_VPC",
            "LAMBDA_CONCURRENCY_CHECK",
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "foo.zip",
        },
        "Environment": {
          "Variables": {
            "NAMESPACE": {
              "Ref": "DeploymentNamespace",
            },
            "POWERTOOLS_LOGGER_LOG_EVENT": "True",
            "POWERTOOLS_SERVICE_NAME": "JobsApiHandler",
            "SEND_ANONYMOUS_DATA": {
              "Fn::FindInMap": [
                "AnonymousData",
                "SendAnonymousData",
                "Data",
              ],
            },
            "SOLUTION_VERSION": "v1.0.0",
            "STACK_ID": {
              "Ref": "AWS::StackId",
            },
            "TABLE_DELEGATED_ADMIN": {
              "Ref": "DelegatedAdminsTable29E80916",
            },
            "TABLE_JOBS": {
              "Ref": "JobHistoryTableE4B293DD",
            },
            "TABLE_POLICY_EXPLORER": {
              "Ref": "PolicyExplorerTable3E6DD7C7",
            },
            "TABLE_RESOURCE_BASED_POLICY": {
              "Ref": "ResourceBasedPolicyTable7277C643",
            },
            "TABLE_TRUSTED_ACCESS": {
              "Ref": "TrustedAccessTable495B447A",
            },
            "TIME_TO_LIVE_IN_DAYS": {
              "Ref": "DynamoTimeToLive",
            },
          },
        },
        "Handler": "assessment_runner/api_router.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "JobHistoryJobsHandlerServiceRole5B211282",
            "Arn",
          ],
        },
        "Runtime": "python3.12",
        "Timeout": 60,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "JobHistoryJobsHandlerServiceRole5B211282": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CFN_NO_EXPLICIT_RESOURCE_NAMES",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "JobHistoryJobsHandlerServiceRoleDefaultPolicy4863DA03": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "JobHistoryTableE4B293DD",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "DelegatedAdminsTable29E80916",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "DelegatedAdminsTable29E80916",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "TrustedAccessTable495B447A",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "TrustedAccessTable495B447A",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ResourceBasedPolicyTable7277C643",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ResourceBasedPolicyTable7277C643",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "PolicyExplorerTable3E6DD7C7",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "PolicyExplorerTable3E6DD7C7",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "JobHistoryJobsHandlerServiceRoleDefaultPolicy4863DA03",
        "Roles": [
          {
            "Ref": "JobHistoryJobsHandlerServiceRole5B211282",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "JobHistoryTableE4B293DD": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "DYNAMODB_TABLE_ENCRYPTED_KMS",
            "DYNAMODB_TABLE_ENCRYPTED_KMS_ALLOWED_ALGORITHMS",
          ],
        },
      },
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "PartitionKey",
            "AttributeType": "S",
          },
          {
            "AttributeName": "SortKey",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "PartitionKey",
            "KeyType": "HASH",
          },
          {
            "AttributeName": "SortKey",
            "KeyType": "RANGE",
          },
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true,
          "RecoveryPeriodInDays": 10,
        },
        "SSESpecification": {
          "SSEEnabled": true,
        },
        "TimeToLiveSpecification": {
          "AttributeName": "ExpiresAt",
          "Enabled": true,
        },
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "PolicyExplorerDynamoDbRoleB7F393DE": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CFN_NO_EXPLICIT_RESOURCE_NAMES",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "PolicyExplorerDynamoDbRoleDefaultPolicyF1853B61": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "dynamodb:Query",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "PolicyExplorerTable3E6DD7C7",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "PolicyExplorerDynamoDbRoleDefaultPolicyF1853B61",
        "Roles": [
          {
            "Ref": "PolicyExplorerDynamoDbRoleB7F393DE",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "PolicyExplorerFinishAsyncJob297E891C": {
      "DependsOn": [
        "PolicyExplorerFinishAsyncJobServiceRoleDefaultPolicy3BB1F1AC",
        "PolicyExplorerFinishAsyncJobServiceRole7B0710E4",
      ],
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "LAMBDA_INSIDE_VPC",
            "LAMBDA_CONCURRENCY_CHECK",
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "foo.zip",
        },
        "Environment": {
          "Variables": {
            "COMPONENT_TABLE": {
              "Ref": "PolicyExplorerTable3E6DD7C7",
            },
            "POWERTOOLS_SERVICE_NAME": "FinishScanForResourceBasedPolicies",
            "SEND_ANONYMOUS_DATA": {
              "Fn::FindInMap": [
                "AnonymousData",
                "SendAnonymousData",
                "Data",
              ],
            },
            "SOLUTION_VERSION": "v1.0.0",
            "STACK_ID": {
              "Ref": "AWS::StackId",
            },
            "TABLE_JOBS": {
              "Ref": "JobHistoryTableE4B293DD",
            },
            "TIME_TO_LIVE_IN_DAYS": {
              "Ref": "DynamoTimeToLive",
            },
          },
        },
        "Handler": "policy_explorer/finish_scan.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "PolicyExplorerFinishAsyncJobServiceRole7B0710E4",
            "Arn",
          ],
        },
        "Runtime": "python3.12",
        "Timeout": 60,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "PolicyExplorerFinishAsyncJobServiceRole7B0710E4": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CFN_NO_EXPLICIT_RESOURCE_NAMES",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "PolicyExplorerFinishAsyncJobServiceRoleDefaultPolicy3BB1F1AC": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "JobHistoryTableE4B293DD",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "PolicyExplorerTable3E6DD7C7",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "PolicyExplorerTable3E6DD7C7",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "PolicyExplorerFinishAsyncJobServiceRoleDefaultPolicy3BB1F1AC",
        "Roles": [
          {
            "Ref": "PolicyExplorerFinishAsyncJobServiceRole7B0710E4",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "PolicyExplorerPolicyExplorerScanSingleAccount706DFDA3": {
      "DependsOn": [
        "PolicyExplorerPolicyExplorerScanSingleAccountServiceRoleDefaultPolicy62631D58",
        "PolicyExplorerPolicyExplorerScanSingleAccountServiceRole14522DF7",
      ],
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "LAMBDA_INSIDE_VPC",
            "LAMBDA_CONCURRENCY_CHECK",
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "foo.zip",
        },
        "Environment": {
          "Variables": {
            "COMPONENT_TABLE": {
              "Ref": "PolicyExplorerTable3E6DD7C7",
            },
            "LOG_LEVEL": "INFO",
            "NAMESPACE": {
              "Ref": "DeploymentNamespace",
            },
            "ORG_MANAGEMENT_ROLE_NAME": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "DeploymentNamespace",
                  },
                  "-",
                  {
                    "Ref": "AWS::Region",
                  },
                  "-AccountAssessment-OrgMgmtStackRole",
                ],
              ],
            },
            "POLICY_ITEM_TTL_IN_DAYS": "1",
            "POWERTOOLS_SERVICE_NAME": "ScanResourceBasedPolicyInSpokeAccount",
            "SEND_ANONYMOUS_DATA": {
              "Fn::FindInMap": [
                "AnonymousData",
                "SendAnonymousData",
                "Data",
              ],
            },
            "SOLUTION_VERSION": "v1.0.0",
            "SPOKE_ROLE_NAME": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "DeploymentNamespace",
                  },
                  "-",
                  {
                    "Ref": "AWS::Region",
                  },
                  "-AccountAssessment-Spoke-ExecutionRole",
                ],
              ],
            },
            "STACK_ID": {
              "Ref": "AWS::StackId",
            },
            "TABLE_JOBS": {
              "Ref": "JobHistoryTableE4B293DD",
            },
            "TIME_TO_LIVE_IN_DAYS": {
              "Ref": "DynamoTimeToLive",
            },
          },
        },
        "Handler": "policy_explorer/scan_single_service.lambda_handler",
        "MemorySize": 3584,
        "Role": {
          "Fn::GetAtt": [
            "PolicyExplorerPolicyExplorerScanSingleAccountServiceRole14522DF7",
            "Arn",
          ],
        },
        "Runtime": "python3.12",
        "Timeout": 29,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "PolicyExplorerPolicyExplorerScanSingleAccountServiceRole14522DF7": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CFN_NO_EXPLICIT_RESOURCE_NAMES",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "RoleName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "DeploymentNamespace",
              },
              "-",
              {
                "Ref": "AWS::Region",
              },
              "-PolicyExplorerScanSingleAccountResource",
            ],
          ],
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "PolicyExplorerPolicyExplorerScanSingleAccountServiceRoleDefaultPolicy62631D58": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:iam::*:role/",
                    {
                      "Ref": "DeploymentNamespace",
                    },
                    "-",
                    {
                      "Ref": "AWS::Region",
                    },
                    "-AccountAssessment-Spoke-ExecutionRole",
                  ],
                ],
              },
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "PolicyExplorerTable3E6DD7C7",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "PolicyExplorerTable3E6DD7C7",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "JobHistoryTableE4B293DD",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "PolicyExplorerPolicyExplorerScanSingleAccountServiceRoleDefaultPolicy62631D58",
        "Roles": [
          {
            "Ref": "PolicyExplorerPolicyExplorerScanSingleAccountServiceRole14522DF7",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "PolicyExplorerPolicyExplorerScanSpokeResourceCE1226F7": {
      "DependsOn": [
        "PolicyExplorerPolicyExplorerScanSpokeResourceServiceRoleDefaultPolicy6AD79F27",
        "PolicyExplorerPolicyExplorerScanSpokeResourceServiceRole3B78E70E",
      ],
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "LAMBDA_INSIDE_VPC",
            "LAMBDA_CONCURRENCY_CHECK",
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "foo.zip",
        },
        "Environment": {
          "Variables": {
            "COMPONENT_TABLE": {
              "Ref": "PolicyExplorerTable3E6DD7C7",
            },
            "LOG_LEVEL": "INFO",
            "NAMESPACE": {
              "Ref": "DeploymentNamespace",
            },
            "ORG_MANAGEMENT_ROLE_NAME": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "DeploymentNamespace",
                  },
                  "-",
                  {
                    "Ref": "AWS::Region",
                  },
                  "-AccountAssessment-OrgMgmtStackRole",
                ],
              ],
            },
            "POLICY_ITEM_TTL_IN_DAYS": "1",
            "POWERTOOLS_SERVICE_NAME": "ScanResourceBasedPolicyInSpokeAccount",
            "SEND_ANONYMOUS_DATA": {
              "Fn::FindInMap": [
                "AnonymousData",
                "SendAnonymousData",
                "Data",
              ],
            },
            "SOLUTION_VERSION": "v1.0.0",
            "SPOKE_ROLE_NAME": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "DeploymentNamespace",
                  },
                  "-",
                  {
                    "Ref": "AWS::Region",
                  },
                  "-AccountAssessment-Spoke-ExecutionRole",
                ],
              ],
            },
            "STACK_ID": {
              "Ref": "AWS::StackId",
            },
            "TABLE_JOBS": {
              "Ref": "JobHistoryTableE4B293DD",
            },
            "TIME_TO_LIVE_IN_DAYS": {
              "Ref": "DynamoTimeToLive",
            },
          },
        },
        "Handler": "policy_explorer/step_functions_lambda/scan_policy_all_services_router.lambda_handler",
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "PolicyExplorerPolicyExplorerScanSpokeResourceServiceRole3B78E70E",
            "Arn",
          ],
        },
        "Runtime": "python3.12",
        "Timeout": 900,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "PolicyExplorerPolicyExplorerScanSpokeResourceServiceRole3B78E70E": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CFN_NO_EXPLICIT_RESOURCE_NAMES",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "RoleName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "DeploymentNamespace",
              },
              "-",
              {
                "Ref": "AWS::Region",
              },
              "-PolicyExplorerScanSpokeResource",
            ],
          ],
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "PolicyExplorerPolicyExplorerScanSpokeResourceServiceRoleDefaultPolicy6AD79F27": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:iam::*:role/",
                    {
                      "Ref": "DeploymentNamespace",
                    },
                    "-",
                    {
                      "Ref": "AWS::Region",
                    },
                    "-AccountAssessment-Spoke-ExecutionRole",
                  ],
                ],
              },
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "PolicyExplorerTable3E6DD7C7",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "PolicyExplorerTable3E6DD7C7",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "JobHistoryTableE4B293DD",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:iam::*:role/",
                    {
                      "Ref": "DeploymentNamespace",
                    },
                    "-",
                    {
                      "Ref": "AWS::Region",
                    },
                    "-AccountAssessment-OrgMgmtStackRole",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "PolicyExplorerPolicyExplorerScanSpokeResourceServiceRoleDefaultPolicy6AD79F27",
        "Roles": [
          {
            "Ref": "PolicyExplorerPolicyExplorerScanSpokeResourceServiceRole3B78E70E",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "PolicyExplorerReadD7458004": {
      "DependsOn": [
        "PolicyExplorerReadServiceRoleDefaultPolicy96327407",
        "PolicyExplorerReadServiceRole0CAC9B9E",
      ],
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "LAMBDA_INSIDE_VPC",
            "LAMBDA_CONCURRENCY_CHECK",
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "foo.zip",
        },
        "Environment": {
          "Variables": {
            "COMPONENT_TABLE": {
              "Ref": "PolicyExplorerTable3E6DD7C7",
            },
            "NAMESPACE": {
              "Ref": "DeploymentNamespace",
            },
            "POWERTOOLS_SERVICE_NAME": "ReadPolicyExplorer",
            "SEND_ANONYMOUS_DATA": {
              "Fn::FindInMap": [
                "AnonymousData",
                "SendAnonymousData",
                "Data",
              ],
            },
            "SOLUTION_VERSION": "v1.0.0",
            "STACK_ID": {
              "Ref": "AWS::StackId",
            },
            "TABLE_JOBS": {
              "Ref": "JobHistoryTableE4B293DD",
            },
          },
        },
        "Handler": "policy_explorer/read_policies.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "PolicyExplorerReadServiceRole0CAC9B9E",
            "Arn",
          ],
        },
        "Runtime": "python3.12",
        "Timeout": 60,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "PolicyExplorerReadServiceRole0CAC9B9E": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CFN_NO_EXPLICIT_RESOURCE_NAMES",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "PolicyExplorerReadServiceRoleDefaultPolicy96327407": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "PolicyExplorerTable3E6DD7C7",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "PolicyExplorerTable3E6DD7C7",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "PolicyExplorerReadServiceRoleDefaultPolicy96327407",
        "Roles": [
          {
            "Ref": "PolicyExplorerReadServiceRole0CAC9B9E",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "PolicyExplorerScanAllSpokeAccountsC4284EFB": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "PolicyExplorerScanAllSpokeAccountsRoleDefaultPolicyE01329E7",
        "PolicyExplorerScanAllSpokeAccountsRole398CEDEC",
      ],
      "Properties": {
        "DefinitionString": {
          "Fn::Join": [
            "",
            [
              "{"StartAt":"AccountIterator","States":{"AccountIterator":{"Type":"Map","ResultPath":null,"Next":"FinishJob","InputPath":"$","Catch":[{"ErrorEquals":["States.ALL"],"ResultPath":"$.Error","Next":"FailJob"}],"ItemsPath":"$.Scan.AccountIds","ItemSelector":{"AccountId.$":"$$.Map.Item.Value","ServiceNames.$":"$.Scan.ServiceNames","JobId.$":"$.JobId"},"ItemProcessor":{"ProcessorConfig":{"Mode":"DISTRIBUTED","ExecutionType":"STANDARD"},"StartAt":"AccountValidation","States":{"AccountValidation":{"Next":"ServiceIterator","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","ResultPath":"$.ValidationResult","ResultSelector":{"ServicesToScanForAccount.$":"$.Payload.ServicesToScanForAccount","Status.$":"$.Payload.Validation","StatusCode.$":"$.StatusCode","RequestId.$":"$.SdkResponseMetadata.RequestId","Regions.$":"$.Payload.Regions"},"Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke","Parameters":{"FunctionName":"",
              {
                "Fn::GetAtt": [
                  "PolicyExplorerValidateSpokeAccessA430B0C1",
                  "Arn",
                ],
              },
              "","Payload.$":"$"}},"ServiceIterator":{"Type":"Map","End":true,"ItemsPath":"$.ValidationResult.ServicesToScanForAccount","ItemSelector":{"ServiceName.$":"$$.Map.Item.Value","AccountId.$":"$.AccountId","Regions.$":"$.ValidationResult.Regions","JobId.$":"$.JobId"},"ItemProcessor":{"ProcessorConfig":{"Mode":"INLINE"},"StartAt":"ScanServicePerAccount","States":{"ScanServicePerAccount":{"Next":"TaskComplete","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","ResultSelector":{"Status.$":"$.Payload","StatusCode.$":"$.StatusCode","RequestId.$":"$.SdkResponseMetadata.RequestId"},"Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke","Parameters":{"FunctionName":"",
              {
                "Fn::GetAtt": [
                  "PolicyExplorerPolicyExplorerScanSpokeResourceCE1226F7",
                  "Arn",
                ],
              },
              "","Payload.$":"$"}},"TaskComplete":{"Type":"Pass","Parameters":{"StartTime.$":"$$.Execution.StartTime","ExecutionName.$":"$$.Execution.Name"},"End":true}}},"MaxConcurrency":10}}},"MaxConcurrency":10},"FinishJob":{"Next":"Success","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke","Parameters":{"FunctionName":"",
              {
                "Fn::GetAtt": [
                  "PolicyExplorerFinishAsyncJob297E891C",
                  "Arn",
                ],
              },
              "","Payload":{"AssessmentType":"POLICY_EXPLORER","Result":"SUCCEEDED","JobId.$":"$.JobId"}}},"Success":{"Type":"Succeed"},"FailJob":{"Next":"Failed","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke","Parameters":{"FunctionName":"",
              {
                "Fn::GetAtt": [
                  "PolicyExplorerFinishAsyncJob297E891C",
                  "Arn",
                ],
              },
              "","Payload":{"AssessmentType":"POLICY_EXPLORER","Result":"FAILED","JobId.$":"$.JobId","Error.$":"$.Error"}}},"Failed":{"Type":"Fail"}}}",
            ],
          ],
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "PolicyExplorerScanAllSpokeAccountsRole398CEDEC",
            "Arn",
          ],
        },
        "StateMachineName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "DeploymentNamespace",
              },
              "-PolicyExplorerScan-StateMachine",
            ],
          ],
        },
        "TracingConfiguration": {
          "Enabled": true,
        },
      },
      "Type": "AWS::StepFunctions::StateMachine",
      "UpdateReplacePolicy": "Delete",
    },
    "PolicyExplorerScanAllSpokeAccountsRole398CEDEC": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CFN_NO_EXPLICIT_RESOURCE_NAMES",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "states.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "PolicyExplorerScanAllSpokeAccountsRoleDefaultPolicyE01329E7": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "Resource * is necessary for xray:PutTraceSegments and xray:PutTelemetryRecords.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "PolicyExplorerFinishAsyncJob297E891C",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "PolicyExplorerFinishAsyncJob297E891C",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "PolicyExplorerValidateSpokeAccessA430B0C1",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "PolicyExplorerValidateSpokeAccessA430B0C1",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "PolicyExplorerPolicyExplorerScanSpokeResourceCE1226F7",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "PolicyExplorerPolicyExplorerScanSpokeResourceCE1226F7",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
                "xray:GetSamplingRules",
                "xray:GetSamplingTargets",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":states:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":stateMachine:",
                      {
                        "Ref": "DeploymentNamespace",
                      },
                      "-PolicyExplorerScan-StateMachine",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "PolicyExplorerScanAllSpokeAccountsRoleDefaultPolicyE01329E7",
        "Roles": [
          {
            "Ref": "PolicyExplorerScanAllSpokeAccountsRole398CEDEC",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "PolicyExplorerStartScan0A32F675": {
      "DependsOn": [
        "PolicyExplorerStartScanServiceRoleDefaultPolicyFF45000F",
        "PolicyExplorerStartScanServiceRole9AC79B15",
      ],
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "LAMBDA_INSIDE_VPC",
            "LAMBDA_CONCURRENCY_CHECK",
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "foo.zip",
        },
        "Environment": {
          "Variables": {
            "COMPONENT_TABLE": {
              "Ref": "PolicyExplorerTable3E6DD7C7",
            },
            "LOG_LEVEL": "INFO",
            "NAMESPACE": {
              "Ref": "DeploymentNamespace",
            },
            "ORG_MANAGEMENT_ROLE_NAME": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "DeploymentNamespace",
                  },
                  "-",
                  {
                    "Ref": "AWS::Region",
                  },
                  "-AccountAssessment-OrgMgmtStackRole",
                ],
              ],
            },
            "POWERTOOLS_SERVICE_NAME": "ScanPolicyExplorer",
            "SCAN_POLICIES_STATE_MACHINE_ARN": {
              "Ref": "PolicyExplorerScanAllSpokeAccountsC4284EFB",
            },
            "SEND_ANONYMOUS_DATA": {
              "Fn::FindInMap": [
                "AnonymousData",
                "SendAnonymousData",
                "Data",
              ],
            },
            "SOLUTION_VERSION": "v1.0.0",
            "STACK_ID": {
              "Ref": "AWS::StackId",
            },
            "TABLE_JOBS": {
              "Ref": "JobHistoryTableE4B293DD",
            },
            "TIME_TO_LIVE_IN_DAYS": {
              "Ref": "DynamoTimeToLive",
            },
          },
        },
        "Handler": "policy_explorer/start_state_machine_execution_to_scan_services.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "PolicyExplorerStartScanServiceRole9AC79B15",
            "Arn",
          ],
        },
        "Runtime": "python3.12",
        "Timeout": 120,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "PolicyExplorerStartScanAwsEventsLambdaInvokePermission1EE606A6D": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "PolicyExplorerStartScan0A32F675",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "PolicyExplorerpolicyexplorerscheduleruleEventsRule02E815BD",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "PolicyExplorerStartScanServiceRole9AC79B15": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CFN_NO_EXPLICIT_RESOURCE_NAMES",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "RoleName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "DeploymentNamespace",
              },
              "-",
              {
                "Ref": "AWS::Region",
              },
              "-PolicyExplorer",
            ],
          ],
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "PolicyExplorerStartScanServiceRoleDefaultPolicyFF45000F": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "Resource * is necessary for organizations:List* operations. No risk, because the role can still only access its own organization.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": {
                "Ref": "PolicyExplorerScanAllSpokeAccountsC4284EFB",
              },
            },
            {
              "Action": "organizations:DescribeOrganization",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:iam::*:role/",
                    {
                      "Ref": "DeploymentNamespace",
                    },
                    "-",
                    {
                      "Ref": "AWS::Region",
                    },
                    "-AccountAssessment-OrgMgmtStackRole",
                  ],
                ],
              },
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "PolicyExplorerTable3E6DD7C7",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "PolicyExplorerTable3E6DD7C7",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "JobHistoryTableE4B293DD",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "PolicyExplorerStartScanServiceRoleDefaultPolicyFF45000F",
        "Roles": [
          {
            "Ref": "PolicyExplorerStartScanServiceRole9AC79B15",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "PolicyExplorerTable3E6DD7C7": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "DYNAMODB_TABLE_ENCRYPTED_KMS",
            "DYNAMODB_TABLE_ENCRYPTED_KMS_ALLOWED_ALGORITHMS",
          ],
        },
      },
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "PartitionKey",
            "AttributeType": "S",
          },
          {
            "AttributeName": "SortKey",
            "AttributeType": "S",
          },
          {
            "AttributeName": "JobId",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "JobId",
            "KeySchema": [
              {
                "AttributeName": "JobId",
                "KeyType": "HASH",
              },
            ],
            "Projection": {
              "ProjectionType": "ALL",
            },
          },
        ],
        "KeySchema": [
          {
            "AttributeName": "PartitionKey",
            "KeyType": "HASH",
          },
          {
            "AttributeName": "SortKey",
            "KeyType": "RANGE",
          },
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true,
          "RecoveryPeriodInDays": 10,
        },
        "SSESpecification": {
          "SSEEnabled": true,
        },
        "TimeToLiveSpecification": {
          "AttributeName": "ExpiresAt",
          "Enabled": true,
        },
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "PolicyExplorerValidateSpokeAccessA430B0C1": {
      "DependsOn": [
        "PolicyExplorerValidateSpokeAccessServiceRoleDefaultPolicyA05D9737",
        "PolicyExplorerValidateSpokeAccessServiceRole28EA4095",
      ],
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "LAMBDA_INSIDE_VPC",
            "LAMBDA_CONCURRENCY_CHECK",
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "foo.zip",
        },
        "Environment": {
          "Variables": {
            "COMPONENT_TABLE": {
              "Ref": "PolicyExplorerTable3E6DD7C7",
            },
            "LOG_LEVEL": "INFO",
            "NAMESPACE": {
              "Ref": "DeploymentNamespace",
            },
            "POWERTOOLS_SERVICE_NAME": "ScanPolicyExplorer",
            "SEND_ANONYMOUS_DATA": {
              "Fn::FindInMap": [
                "AnonymousData",
                "SendAnonymousData",
                "Data",
              ],
            },
            "SOLUTION_VERSION": "v1.0.0",
            "SPOKE_ROLE_NAME": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "DeploymentNamespace",
                  },
                  "-",
                  {
                    "Ref": "AWS::Region",
                  },
                  "-AccountAssessment-Spoke-ExecutionRole",
                ],
              ],
            },
            "STACK_ID": {
              "Ref": "AWS::StackId",
            },
            "TABLE_JOBS": {
              "Ref": "JobHistoryTableE4B293DD",
            },
            "TIME_TO_LIVE_IN_DAYS": {
              "Ref": "DynamoTimeToLive",
            },
          },
        },
        "Handler": "policy_explorer/step_functions_lambda/validate_account_access.lambda_handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "PolicyExplorerValidateSpokeAccessServiceRole28EA4095",
            "Arn",
          ],
        },
        "Runtime": "python3.12",
        "Timeout": 900,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "PolicyExplorerValidateSpokeAccessServiceRole28EA4095": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CFN_NO_EXPLICIT_RESOURCE_NAMES",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "RoleName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "DeploymentNamespace",
              },
              "-",
              {
                "Ref": "AWS::Region",
              },
              "-ValidateSpokeAccess",
            ],
          ],
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "PolicyExplorerValidateSpokeAccessServiceRoleDefaultPolicyA05D9737": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "JobHistoryTableE4B293DD",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:iam::*:role/",
                    {
                      "Ref": "DeploymentNamespace",
                    },
                    "-",
                    {
                      "Ref": "AWS::Region",
                    },
                    "-AccountAssessment-Spoke-ExecutionRole",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "PolicyExplorerValidateSpokeAccessServiceRoleDefaultPolicyA05D9737",
        "Roles": [
          {
            "Ref": "PolicyExplorerValidateSpokeAccessServiceRole28EA4095",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "PolicyExplorerpolicyexplorerscheduleruleEventsRule02E815BD": {
      "Properties": {
        "ScheduleExpression": "cron(00 23 * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "PolicyExplorerStartScan0A32F675",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "ResourceBasedPolicyReadDC5D2BC4": {
      "DependsOn": [
        "ResourceBasedPolicyReadServiceRoleDefaultPolicy99498DE7",
        "ResourceBasedPolicyReadServiceRole96A1B85C",
      ],
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "LAMBDA_INSIDE_VPC",
            "LAMBDA_CONCURRENCY_CHECK",
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "foo.zip",
        },
        "Environment": {
          "Variables": {
            "COMPONENT_TABLE": {
              "Ref": "ResourceBasedPolicyTable7277C643",
            },
            "NAMESPACE": {
              "Ref": "DeploymentNamespace",
            },
            "POWERTOOLS_SERVICE_NAME": "ReadResourceBasedPolicy",
            "SEND_ANONYMOUS_DATA": {
              "Fn::FindInMap": [
                "AnonymousData",
                "SendAnonymousData",
                "Data",
              ],
            },
            "SOLUTION_VERSION": "v1.0.0",
            "STACK_ID": {
              "Ref": "AWS::StackId",
            },
            "TABLE_JOBS": {
              "Ref": "JobHistoryTableE4B293DD",
            },
          },
        },
        "Handler": "resource_based_policy/read_resource_based_policies.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "ResourceBasedPolicyReadServiceRole96A1B85C",
            "Arn",
          ],
        },
        "Runtime": "python3.12",
        "Timeout": 60,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "ResourceBasedPolicyReadServiceRole96A1B85C": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CFN_NO_EXPLICIT_RESOURCE_NAMES",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ResourceBasedPolicyReadServiceRoleDefaultPolicy99498DE7": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ResourceBasedPolicyTable7277C643",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ResourceBasedPolicyTable7277C643",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "JobHistoryTableE4B293DD",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ResourceBasedPolicyReadServiceRoleDefaultPolicy99498DE7",
        "Roles": [
          {
            "Ref": "ResourceBasedPolicyReadServiceRole96A1B85C",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ResourceBasedPolicyTable7277C643": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "DYNAMODB_TABLE_ENCRYPTED_KMS",
            "DYNAMODB_TABLE_ENCRYPTED_KMS_ALLOWED_ALGORITHMS",
          ],
        },
      },
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "PartitionKey",
            "AttributeType": "S",
          },
          {
            "AttributeName": "SortKey",
            "AttributeType": "S",
          },
          {
            "AttributeName": "JobId",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "JobId",
            "KeySchema": [
              {
                "AttributeName": "JobId",
                "KeyType": "HASH",
              },
            ],
            "Projection": {
              "ProjectionType": "ALL",
            },
          },
        ],
        "KeySchema": [
          {
            "AttributeName": "PartitionKey",
            "KeyType": "HASH",
          },
          {
            "AttributeName": "SortKey",
            "KeyType": "RANGE",
          },
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true,
          "RecoveryPeriodInDays": 10,
        },
        "SSESpecification": {
          "SSEEnabled": true,
        },
        "TimeToLiveSpecification": {
          "AttributeName": "ExpiresAt",
          "Enabled": true,
        },
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "TrustedAccessRead96AB6071": {
      "DependsOn": [
        "TrustedAccessReadServiceRoleDefaultPolicy4F0CC01B",
        "TrustedAccessReadServiceRoleFED50FB8",
      ],
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "LAMBDA_INSIDE_VPC",
            "LAMBDA_CONCURRENCY_CHECK",
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "foo.zip",
        },
        "Environment": {
          "Variables": {
            "COMPONENT_TABLE": {
              "Ref": "TrustedAccessTable495B447A",
            },
            "NAMESPACE": {
              "Ref": "DeploymentNamespace",
            },
            "POWERTOOLS_SERVICE_NAME": "ReadTrustedAccess",
            "SEND_ANONYMOUS_DATA": {
              "Fn::FindInMap": [
                "AnonymousData",
                "SendAnonymousData",
                "Data",
              ],
            },
            "SOLUTION_VERSION": "v1.0.0",
            "STACK_ID": {
              "Ref": "AWS::StackId",
            },
            "TABLE_JOBS": {
              "Ref": "JobHistoryTableE4B293DD",
            },
          },
        },
        "Handler": "trusted_access_enabled_services/read_trusted_services.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "TrustedAccessReadServiceRoleFED50FB8",
            "Arn",
          ],
        },
        "Runtime": "python3.12",
        "Timeout": 60,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "TrustedAccessReadServiceRoleDefaultPolicy4F0CC01B": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "TrustedAccessTable495B447A",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "TrustedAccessTable495B447A",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "JobHistoryTableE4B293DD",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "TrustedAccessReadServiceRoleDefaultPolicy4F0CC01B",
        "Roles": [
          {
            "Ref": "TrustedAccessReadServiceRoleFED50FB8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "TrustedAccessReadServiceRoleFED50FB8": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CFN_NO_EXPLICIT_RESOURCE_NAMES",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "TrustedAccessStartScan70308E2B": {
      "DependsOn": [
        "TrustedAccessStartScanServiceRoleDefaultPolicyBBB5BB59",
        "TrustedAccessStartScanServiceRoleA218CD44",
      ],
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "LAMBDA_INSIDE_VPC",
            "LAMBDA_CONCURRENCY_CHECK",
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "foo.zip",
        },
        "Environment": {
          "Variables": {
            "COMPONENT_TABLE": {
              "Ref": "TrustedAccessTable495B447A",
            },
            "LOG_LEVEL": "INFO",
            "NAMESPACE": {
              "Ref": "DeploymentNamespace",
            },
            "ORG_MANAGEMENT_ROLE_NAME": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "DeploymentNamespace",
                  },
                  "-",
                  {
                    "Ref": "AWS::Region",
                  },
                  "-AccountAssessment-OrgMgmtStackRole",
                ],
              ],
            },
            "POWERTOOLS_SERVICE_NAME": "ScanTrustedAccess",
            "SEND_ANONYMOUS_DATA": {
              "Fn::FindInMap": [
                "AnonymousData",
                "SendAnonymousData",
                "Data",
              ],
            },
            "SOLUTION_VERSION": "v1.0.0",
            "STACK_ID": {
              "Ref": "AWS::StackId",
            },
            "TABLE_JOBS": {
              "Ref": "JobHistoryTableE4B293DD",
            },
            "TIME_TO_LIVE_IN_DAYS": {
              "Ref": "DynamoTimeToLive",
            },
          },
        },
        "Handler": "trusted_access_enabled_services/scan_for_trusted_services.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "TrustedAccessStartScanServiceRoleA218CD44",
            "Arn",
          ],
        },
        "Runtime": "python3.12",
        "Timeout": 120,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "TrustedAccessStartScanServiceRoleA218CD44": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CFN_NO_EXPLICIT_RESOURCE_NAMES",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "RoleName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "DeploymentNamespace",
              },
              "-",
              {
                "Ref": "AWS::Region",
              },
              "-TrustedAccess",
            ],
          ],
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "TrustedAccessStartScanServiceRoleDefaultPolicyBBB5BB59": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "Resource * is necessary for organizations:List* operations. No risk, because the role can still only access its own organization.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "organizations:DescribeOrganization",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:iam::*:role/",
                    {
                      "Ref": "DeploymentNamespace",
                    },
                    "-",
                    {
                      "Ref": "AWS::Region",
                    },
                    "-AccountAssessment-OrgMgmtStackRole",
                  ],
                ],
              },
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "TrustedAccessTable495B447A",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "TrustedAccessTable495B447A",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "JobHistoryTableE4B293DD",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "TrustedAccessStartScanServiceRoleDefaultPolicyBBB5BB59",
        "Roles": [
          {
            "Ref": "TrustedAccessStartScanServiceRoleA218CD44",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "TrustedAccessTable495B447A": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "DYNAMODB_TABLE_ENCRYPTED_KMS",
            "DYNAMODB_TABLE_ENCRYPTED_KMS_ALLOWED_ALGORITHMS",
          ],
        },
      },
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "PartitionKey",
            "AttributeType": "S",
          },
          {
            "AttributeName": "SortKey",
            "AttributeType": "S",
          },
          {
            "AttributeName": "JobId",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "JobId",
            "KeySchema": [
              {
                "AttributeName": "JobId",
                "KeyType": "HASH",
              },
            ],
            "Projection": {
              "ProjectionType": "ALL",
            },
          },
        ],
        "KeySchema": [
          {
            "AttributeName": "PartitionKey",
            "KeyType": "HASH",
          },
          {
            "AttributeName": "SortKey",
            "KeyType": "RANGE",
          },
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true,
          "RecoveryPeriodInDays": 10,
        },
        "SSESpecification": {
          "SSEEnabled": true,
        },
        "TimeToLiveSpecification": {
          "AttributeName": "ExpiresAt",
          "Enabled": true,
        },
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "WebACL": {
      "Properties": {
        "DefaultAction": {
          "Block": {},
        },
        "Rules": [
          {
            "Action": {
              "Allow": {},
            },
            "Name": "AllowlistRule",
            "Priority": 0,
            "Statement": {
              "IPSetReferenceStatement": {
                "Arn": {
                  "Fn::GetAtt": [
                    "ApiIPSet27316B4C",
                    "Arn",
                  ],
                },
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AccountAssessment-AllowlistMetric",
              "SampledRequestsEnabled": true,
            },
          },
          {
            "Name": "AWS-AWSManagedRulesBotControlRuleSet",
            "OverrideAction": {
              "None": {},
            },
            "Priority": 1,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesBotControlRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWSManagedRulesBotControlRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
          {
            "Name": "AWS-AWSManagedRulesKnownBadInputsRuleSet",
            "OverrideAction": {
              "None": {},
            },
            "Priority": 2,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesKnownBadInputsRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWSManagedRulesKnownBadInputsRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
          {
            "Name": "AWS-AWSManagedRulesCommonRuleSet",
            "OverrideAction": {
              "None": {},
            },
            "Priority": 3,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesCommonRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWSManagedRulesCommonRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
          {
            "Name": "AWS-AWSManagedRulesAnonymousIpList",
            "OverrideAction": {
              "None": {},
            },
            "Priority": 4,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesAnonymousIpList",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWSManagedRulesAnonymousIpList",
              "SampledRequestsEnabled": true,
            },
          },
          {
            "Name": "AWS-AWSManagedRulesAmazonIpReputationList",
            "OverrideAction": {
              "None": {},
            },
            "Priority": 5,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesAmazonIpReputationList",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWSManagedRulesAmazonIpReputationList",
              "SampledRequestsEnabled": true,
            },
          },
          {
            "Name": "AWS-AWSManagedRulesAdminProtectionRuleSet",
            "OverrideAction": {
              "None": {},
            },
            "Priority": 6,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesAdminProtectionRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWSManagedRulesAdminProtectionRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
          {
            "Name": "AWS-AWSManagedRulesSQLiRuleSet",
            "OverrideAction": {
              "None": {},
            },
            "Priority": 7,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesSQLiRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWSManagedRulesSQLiRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
        ],
        "Scope": "REGIONAL",
        "VisibilityConfig": {
          "CloudWatchMetricsEnabled": true,
          "MetricName": "AccountAssessmentWebAclMetrics",
          "SampledRequestsEnabled": true,
        },
      },
      "Type": "AWS::WAFv2::WebACL",
    },
    "WebUIDeployerDeployWebUIC2B79695": {
      "DependsOn": [
        "WebUIDeployerDeployWebUIServiceRoleDefaultPolicyA5CCFE46",
        "WebUIDeployerDeployWebUIServiceRole57CC2ECD",
      ],
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "LAMBDA_INSIDE_VPC",
            "LAMBDA_CONCURRENCY_CHECK",
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "foo.zip",
        },
        "Environment": {
          "Variables": {
            "CONFIG": {
              "Fn::Join": [
                "",
                [
                  "{"SrcBucket":"solutions-",
                  {
                    "Ref": "AWS::Region",
                  },
                  "","SrcPath":"account-assessment-for-aws-organizations/v1.0.0/webui/","WebUIBucket":"",
                  {
                    "Ref": "CloudFrontS3Bucket68FEB4E1",
                  },
                  "","awsExports":{"API":{"endpoints":[{"name":"AccountAssessmentApi","endpoint":"https://",
                  {
                    "Ref": "ApiAccountAssessmentForAWSOrganisationsApiCC987D5A",
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region",
                  },
                  ".amazonaws.com/prod"}]},"loggingLevel":"INFO","Auth":{"region":"",
                  {
                    "Ref": "AWS::Region",
                  },
                  "","userPoolId":"",
                  {
                    "Ref": "AuthFullAccessUsers932AF091",
                  },
                  "","userPoolWebClientId":"",
                  {
                    "Ref": "AuthFullAccessUsersWebUIClient18642E52",
                  },
                  "","mandatorySignIn":true,"oauth":{"domain":"",
                  {
                    "Ref": "DeploymentNamespace",
                  },
                  "-",
                  {
                    "Ref": "AWS::AccountId",
                  },
                  ".auth.",
                  {
                    "Ref": "AWS::Region",
                  },
                  ".amazoncognito.com","scope":["openid","profile","email","aws.cognito.signin.user.admin","account-assessment-api/api"],"redirectSignIn":"https://",
                  {
                    "Fn::GetAtt": [
                      "CloudFrontCloudFrontDistribution824F3346",
                      "DomainName",
                    ],
                  },
                  "/","redirectSignOut":"https://",
                  {
                    "Fn::GetAtt": [
                      "CloudFrontCloudFrontDistribution824F3346",
                      "DomainName",
                    ],
                  },
                  "/","responseType":"code","clientId":"",
                  {
                    "Ref": "AuthFullAccessUsersWebUIClient18642E52",
                  },
                  ""}},"OrgId":"",
                  {
                    "Ref": "OrganizationID",
                  },
                  ""}}",
                ],
              ],
            },
            "LOG_LEVEL": "INFO",
            "POWERTOOLS_SERVICE_NAME": "DeployWebUI",
            "SEND_ANONYMOUS_DATA": {
              "Fn::FindInMap": [
                "AnonymousData",
                "SendAnonymousData",
                "Data",
              ],
            },
            "SOLUTION_VERSION": "v1.0.0",
            "STACK_ID": {
              "Ref": "AWS::StackId",
            },
          },
        },
        "Handler": "deploy_webui/deploy_webui.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "WebUIDeployerDeployWebUIServiceRole57CC2ECD",
            "Arn",
          ],
        },
        "Runtime": "python3.12",
        "Timeout": 300,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "WebUIDeployerDeployWebUIServiceRole57CC2ECD": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CFN_NO_EXPLICIT_RESOURCE_NAMES",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "WebUIDeployerDeployWebUIServiceRoleDefaultPolicyA5CCFE46": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "CloudFrontS3Bucket68FEB4E1",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::solutions-",
                      {
                        "Ref": "AWS::Region",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::solutions-",
                      {
                        "Ref": "AWS::Region",
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "WebUIDeployerDeployWebUIServiceRoleDefaultPolicyA5CCFE46",
        "Roles": [
          {
            "Ref": "WebUIDeployerDeployWebUIServiceRole57CC2ECD",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "WebUIDeployerWebUIDeploymentResourceDC3D4E53": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "ServiceTimeout": "300",
        "ServiceToken": {
          "Fn::GetAtt": [
            "WebUIDeployerDeployWebUIC2B79695",
            "Arn",
          ],
        },
        "SolutionVersion": "v1.0.0",
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`org management stack synth doesnt crash 1`] = `
{
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Solution Setup",
          },
          "Parameters": [
            "DeploymentNamespace",
            "HubAccountId",
          ],
        },
      ],
      "ParameterLabels": {
        "DeploymentNamespace": {
          "default": "Provide the unique namespace value from Hub deployment",
        },
        "HubAccountId": {
          "default": "Provide the Hub Account Id",
        },
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "DeploymentNamespace": {
      "AllowedPattern": "^[a-z0-9][a-z0-9-]{1,8}[a-z0-9]$",
      "ConstraintDescription": "Must be 3-10 characters long, containing only lowercase letters, numbers, and hyphens. Cannot begin or end with a hyphen.",
      "Description": "Will be used as prefix for resource names. Same namespace must be used in hub stack.",
      "MaxLength": 10,
      "MinLength": 3,
      "Type": "String",
    },
    "HubAccountId": {
      "Description": "ID of the AWS account where the Hub Stack of this solution is deployed.",
      "Type": "String",
    },
  },
  "Resources": {
    "OrgManagementStackRoleF3732685": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W11",
              "reason": "Resource * is necessary for organizations:List* operations. No risk, because the role can still only access its own organization.",
            },
            {
              "id": "W28",
              "reason": "This role needs an explicit name so that the Hub Stack can reference the role.",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "IAM_NO_INLINE_POLICY_CHECK",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "HubAccountId",
                      },
                      ":role/",
                      {
                        "Ref": "DeploymentNamespace",
                      },
                      "-",
                      {
                        "Ref": "AWS::Region",
                      },
                      "-TrustedAccess",
                    ],
                  ],
                },
              },
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "HubAccountId",
                      },
                      ":role/",
                      {
                        "Ref": "DeploymentNamespace",
                      },
                      "-",
                      {
                        "Ref": "AWS::Region",
                      },
                      "-DelegatedAdmin",
                    ],
                  ],
                },
              },
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "HubAccountId",
                      },
                      ":role/",
                      {
                        "Ref": "DeploymentNamespace",
                      },
                      "-",
                      {
                        "Ref": "AWS::Region",
                      },
                      "-PolicyExplorer",
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "organizations:ListAccounts",
                    "organizations:ListAccountsForParent",
                    "organizations:ListDelegatedAdministrators",
                    "organizations:ListDelegatedServicesForAccount",
                    "organizations:ListAWSServiceAccessForOrganization",
                    "organizations:DescribePolicy",
                    "organizations:ListPolicies",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "listAccounts",
          },
        ],
        "RoleName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "DeploymentNamespace",
              },
              "-",
              {
                "Ref": "AWS::Region",
              },
              "-AccountAssessment-OrgMgmtStackRole",
            ],
          ],
        },
      },
      "Type": "AWS::IAM::Role",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`spoke stack synth doesnt crash 1`] = `
{
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Solution Setup",
          },
          "Parameters": [
            "DeploymentNamespace",
            "HubAccountId",
          ],
        },
      ],
      "ParameterLabels": {
        "DeploymentNamespace": {
          "default": "Provide the unique namespace value from Hub deployment",
        },
        "HubAccountId": {
          "default": "Provide the Hub Account Id",
        },
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "DeploymentNamespace": {
      "AllowedPattern": "^[a-z0-9][a-z0-9-]{1,8}[a-z0-9]$",
      "ConstraintDescription": "Must be 3-10 characters long, containing only lowercase letters, numbers, and hyphens. Cannot begin or end with a hyphen.",
      "Description": "Will be used as prefix for resource names. Same namespace must be used in hub stack.",
      "MaxLength": 10,
      "MinLength": 3,
      "Type": "String",
    },
    "HubAccountId": {
      "Description": "ID of the AWS account where the Hub Stack of this solution is deployed.",
      "Type": "String",
    },
  },
  "Resources": {
    "ScanSpokePolicy7A5F4EE9": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "Resource * is necessary to allow scanning all resources using the listed operations.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetBucketPolicy",
                "s3:ListAllMyBuckets",
                "s3:GetBucketLocation",
                "glacier:GetVaultAccessPolicy",
                "glacier:ListVaults",
                "sns:ListTopics",
                "sqs:ListQueues",
                "iam:ListRoles",
                "iam:ListPolicies",
                "iam:ListRolePolicies",
                "lambda:ListFunctions",
                "elasticfilesystem:DescribeFileSystemPolicy",
                "elasticfilesystem:DescribeFileSystems",
                "secretsmanager:ListSecrets",
                "iot:ListPolicies",
                "kms:ListKeys",
                "kms:GetKeyPolicy",
                "events:ListEventBuses",
                "ses:ListEmailIdentities",
                "apigateway:GET",
                "config:DescribeOrganizationConfigRules",
                "ssm-incidents:ListResponsePlans",
                "es:ListDomainNames",
                "cloudformation:ListStacks",
                "serverlessrepo:ListApplications",
                "backup:ListBackupVaults",
                "codeartifact:ListRepositories",
                "codeartifact:ListDomains",
                "codebuild:ListReportGroups",
                "codebuild:ListProjects",
                "mediastore:ListContainers",
                "ec2:DescribeVpcEndpoints",
                "lex:ListBots",
                "lex:ListBotAliases",
                "redshift-serverless:ListSnapshots",
                "schemas:ListRegistries",
                "ssm-contacts:ListContacts",
                "acm-pca:ListCertificateAuthorities",
                "ram:ListResources",
                "ram:GetResourcePolicies",
                "account:ListRegions",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sns:GetTopicAttributes",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:sns:*:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":*",
                  ],
                ],
              },
            },
            {
              "Action": "sqs:GetQueueAttributes",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:sqs:*:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:GetPolicyVersion",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:iam::",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":policy/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:GetRolePolicy",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:iam::",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":role/*",
                  ],
                ],
              },
            },
            {
              "Action": "lambda:GetPolicy",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:lambda:*:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":function:*",
                  ],
                ],
              },
            },
            {
              "Action": "secretsmanager:GetResourcePolicy",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:secretsmanager:*:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":secret:*",
                  ],
                ],
              },
            },
            {
              "Action": "iot:GetPolicy",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:iot:*:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":policy/*",
                  ],
                ],
              },
            },
            {
              "Action": "ses:GetEmailIdentityPolicies",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ses:*:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":identity/*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ecr:DescribeRepositories",
                "ecr:GetRepositoryPolicy",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ecr:*:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":repository/*",
                  ],
                ],
              },
            },
            {
              "Action": "ssm-incidents:GetResourcePolicies",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm-incidents::",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":response-plan/*",
                  ],
                ],
              },
            },
            {
              "Action": "es:DescribeDomains",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:es:*:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":domain/*",
                  ],
                ],
              },
            },
            {
              "Action": "cloudformation:GetStackPolicy",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:cloudformation:*:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stack/*/*",
                  ],
                ],
              },
            },
            {
              "Action": "glue:GetResourcePolicies",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:glue:*:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":catalog",
                  ],
                ],
              },
            },
            {
              "Action": "serverlessrepo:GetApplicationPolicy",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:serverlessrepo:*:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":applications/*",
                  ],
                ],
              },
            },
            {
              "Action": "backup:GetBackupVaultAccessPolicy",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:backup:*:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":backup-vault:*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "codeartifact:GetRepositoryPermissionsPolicy",
                "codeartifact:GetDomainPermissionsPolicy",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:codeartifact:*:",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":domain/*",
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:codeartifact:*:",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":repository/*/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "codebuild:BatchGetProjects",
                "codebuild:GetResourcePolicy",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:codebuild:*:",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":project/*",
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:codebuild:*:",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":report-group/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "mediastore:GetContainerPolicy",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:mediastore:*:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":container/*",
                  ],
                ],
              },
            },
            {
              "Action": "lex:DescribeResourcePolicy",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:lex:*:",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":bot/*",
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:lex:*:",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":bot-alias/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "redshift-serverless:GetResourcePolicy",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:redshift-serverless:*:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":snapshot/*",
                  ],
                ],
              },
            },
            {
              "Action": "schemas:GetResourcePolicy",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:schemas:*:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":registry/*",
                  ],
                ],
              },
            },
            {
              "Action": "ssm-contacts:GetContactPolicy",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm-contacts:*:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":contact/*",
                  ],
                ],
              },
            },
            {
              "Action": "acm-pca:GetPolicy",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:acm-pca:*:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":certificate-authority/*",
                  ],
                ],
              },
            },
            {
              "Action": "refactor-spaces:GetResourcePolicy",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:refactor-spaces:*:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":environment/*",
                  ],
                ],
              },
            },
            {
              "Action": "network-firewall:DescribeResourcePolicy",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:network-firewall:*:",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":stateful-rulegroup/*",
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:network-firewall:*:",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":stateless-rulegroup/*",
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:network-firewall:*:",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":firewall-policy/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "glue:GetResourcePolicy",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:glue:*:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":catalog",
                  ],
                ],
              },
            },
            {
              "Action": "route53resolver:GetFirewallRuleGroupPolicy",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:route53resolver:*:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":firewall-rule-group/*",
                  ],
                ],
              },
            },
            {
              "Action": "vpc-lattice:GetResourcePolicy",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:vpc-lattice:*:",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":service/*",
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:vpc-lattice:*:",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":servicenetwork/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "ec2:GetResourcePolicy",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ec2:*:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":verified-access-group/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ScanSpokePolicy7A5F4EE9",
        "Roles": [
          {
            "Ref": "SpokeStackRoleE52E7349",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SpokeStackRoleE52E7349": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W11",
              "reason": "Resource * is necessary to allow scanning all resources using the listed operations.",
            },
            {
              "id": "W28",
              "reason": "This role needs an explicit name so that the Hub Stack can reference the role in all Spoke Stacks.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "HubAccountId",
                      },
                      ":role/",
                      {
                        "Ref": "DeploymentNamespace",
                      },
                      "-",
                      {
                        "Ref": "AWS::Region",
                      },
                      "-ValidateSpokeAccess",
                    ],
                  ],
                },
              },
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "HubAccountId",
                      },
                      ":role/",
                      {
                        "Ref": "DeploymentNamespace",
                      },
                      "-",
                      {
                        "Ref": "AWS::Region",
                      },
                      "-PolicyExplorerScanSpokeResource",
                    ],
                  ],
                },
              },
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "HubAccountId",
                      },
                      ":role/",
                      {
                        "Ref": "DeploymentNamespace",
                      },
                      "-",
                      {
                        "Ref": "AWS::Region",
                      },
                      "-PolicyExplorerScanSingleAccountResource",
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "DeploymentNamespace",
              },
              "-",
              {
                "Ref": "AWS::Region",
              },
              "-AccountAssessment-Spoke-ExecutionRole",
            ],
          ],
        },
      },
      "Type": "AWS::IAM::Role",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
